/*
* ================================================
* =============================================
Deployment Diagram- Диаграмма развертывания

Фото 01_09_23

Пример:
 Нужен сервер на которую установим программу, нужно модернизировать так чтобы эта программа заработала
Если нужно чтобы Сервер общался с сетью Инет. Так и пишем Инет

Она состоит из узлов + комментарий к узлам + устройтсва подключения.
Пример:
Самая простая Диаграмма развертывания - Это системные требования к по
Диаграмма Развертывания  - Это Технические Характиристики(Карточка с стребованиями ) - Это и есть комментарии к узлу.

Пример: Фотошом
Нужно чтобы его установить. то надо установить еще какой то пакет от которого будет работать программа( Тоесть Дополнительные требования)

//////////////////////////////////////
Диаграмма развертывания (Deployment Diagram) в UML - это диаграмма,
которая показывает, как компоненты системы (например, модули, сервисы, компоненты)
будут развернуты на различных устройствах или в различных средах

///////////////////////////////////
На диаграмме развертывания можно представить,
как различные компоненты будут работать вместе и взаимодействовать друг с другом,
а также как они будут взаимодействовать с внешней средой.

//////////////////////////////////////
Диаграмма развертывания может использоваться для описания систем, которые работают в различных средах,
таких как облачные, мобильные или встраиваемые системы. Она может помочь разработчикам понять, 
как компоненты будут взаимодействовать и как будет работать система в целом.
//////////////////////////////////////

Пример: 
Это системные требования для установки, для работы системы.
Диаграмма развертывания выглядит как в CISKO - мы делали подключение Свитч + Сервер + Свитч ( и пишутся требования)

Пример: Игра 
Для установки игры на ПК пишуться требования (Что понадобиться Какое Железо. Какие программы надо установить. и Т.Д.)

///////////////////////////////////////////////////////////////////
Диаграмма развертывания - это UML-диаграмма, которая используется для моделирования процесса развертывания
программного обеспечения на различных устройствах. Она позволяет описать, как компоненты программного обеспечения
будут устанавливаться и запускаться на различных платформах, включая компьютеры, смартфоны, планшеты и другие устройства.
////////////////////////////////////////////////////

ДИАГРАММА РАЗВЕРТЫВАНИЯ СОСТОИТ ИЗ 3-Х ОСНОВНЫХ ЭЛЕМЕНТОВ

В UML диаграмма развертывания состоит из трех основных элементов:

1)
Компоненты - это части программного обеспечения, которые будут установлены на различные устройства. 
Они могут быть представлены в виде классов, объектов или функций.
2)
Устройства - это физические устройства, на которых будут установлены компоненты программного обеспечения.
Они могут быть компьютерами, смартфонами, планшетами и другими устройствами.
3)
Связки - это связи между компонентами и устройствами, которые определяют, как компоненты устанавливаются на устройства. 
Они могут включать в себя такие параметры, как версия операционной системы, наличие необходимых драйверов и т.д.

Пример: Посдключение к Инету как на схеме CISKO

Рисуются Коммутатор - ПК - Свитч - Сервера.
Рисуются тип связи - Проводная. WiFi, или это оптоволокно
Рисуются компоненты - Это ip4  - Это Такой то Сервер (Модедль, Количество 2 Ггрц,+ Частота + мощьность + сколько дисков+ Объем Инфы , Это такое то ПО ) 
         Свитч -(С такими то возможностями, количеством разъемов)

Итог : ДИАГРАММА РАЗВЕРТЫВАНИЯ Это Иллюстрация нашей системы с тех характиристиками.

=====================================================================
====================================================================

ДИАГРАММА КОММУНИКАЦИЙ  COMMUNICATION DIAGRAM

Это Диаграмма объектов (над стрелками которых надо подписат Что один объект передал другоому)
Стрелки - очень важно (добавлять подпись)

Класс: Роль : Имя

Пакет - Это группа однотипных объектов, которые кем то должны быть обработаны


//////////////////////////////////////////////////
Диаграмма коммуникаций в UML (Unified Modeling Language) - это графическое представление взаимодействия между объектами в системе.

В контексте C++, диаграммы коммуникаций могут использоваться для моделирования взаимодействия между различными компонентами системы,
такими как серверы, базы данных, веб-сервисы и т.д. На диаграмме коммуникаций обычно отображаются объекты, 
которые обмениваются сообщениями или данными, а также связи между ними.

Диаграммы коммуникаций могут помочь разработчикам лучше понять,
как происходит взаимодействие между различными компонентами системы 
и какие вызовы и операции выполняются в процессе работы.

Диаграмма коммуникации - это графический язык, который используется для описания взаимодействия между объектами.
Он позволяет визуализировать потоки данных и сообщений между объектами,
а также определить, кто и каким образом обменивается информацией.

Для C++ диаграмма коммуникации может быть использована для моделирования взаимодействия между классами и объектами,
используя методы и функции.
Она может также использоваться для определения потоков данных между различными модулями программы.
///////////////////////////////////////////////////
Из диаграммы коммуникаций Мы видим Роли Мы видим Объекты.


Если принципиальна РОЛЬ то пишем так " :Роль: " - Ипользуем :
Диаграмма коммуникаций это Порядок общения (тоесть как прошодит общение)

показывает динамику общения Кто что Делает?

1) Составляем Диаграмму Прецендентов
2) Строим диаграмму коммуникаций - Это слепки моментов времени.
3) диаграмма Классов
4) Пишем код.



======================================================================
======================================================================
Диаграмма Компонентов
1)Это описание системы на одном уровне абстракции

Пример: ПК
Если мы Описываем Пк в Целом то и Монитор тоже берем как отдельный компонент. и не уходим в подробности
Но когда мы делаем Диаграмму компонентов для монитора - то тут можно углубиться в детали(Цвет + Диагональ+ Качество монитора + время прерывания кадров)

2)Диаграмма компонентов Создается для конкретного объекта(Тоесть проверяем его запчасти)

3) Диаграмма компонентов описывает способы  взаимосвязи компонентов  между собой

Пример: ПК 
Допустим блок питания никак не привязан к Системе охлаждения. Допустим Если мы описываем систему охлада) _ Не очень пример!!!

/////////////////////////////////////////////
 В контексте С++ диаграмма компонентов может использоваться
 для представления классов и объектов, которые являются компонентами приложения.

 На этой диаграмме компоненты изображаются в виде прямоугольников, внутри которых могут находиться другие элементы,
 такие как атрибуты, методы и зависимости.
 Каждый компонент имеет свое имя и описание, а также может иметь зависимости от других компонентов.

 С помощью диаграммы компонентов можно описать структуру приложения, 
 определить, какие классы и объекты взаимодействуют друг с другом, 
 и выявить возможные проблемы в системе.

 Диаграмма компонентов (Component diagram) в UML представляет собой диаграмму,
 которая используется для визуализации компонентов и их отношений друг с другом.
 В контексте языка программирования C++, диаграмма компонентов используется для 
 моделирования классов и объектов как компонентов приложения.

 Использование диаграммы компонентов позволяет разработчикам 
 наглядно представить структуру приложения, понять,
 какие классы взаимодействуют друг с другом и выявить потенциальные проблемы в программе.

 ///////////////////////////////////////////////

*/